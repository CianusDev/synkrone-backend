import { db, query } from "../../config/database";
import fs from "fs";
import path from "path";

/**
 * Parse le SQL PostgreSQL en respectant les d√©limiteurs $$ pour les fonctions
 * et les d√©limiteurs sp√©ciaux -- DELIMITER //
 */
function parsePostgreSQLBlocks(sqlContent: string): string[] {
  const blocks: string[] = [];
  let currentBlock = "";
  let insideDollarQuotes = false;
  let dollarQuoteTag = "";

  // Nettoyer le contenu en supprimant les commentaires de ligne d'abord
  const cleanedLines = sqlContent
    .split("\n")
    .map((line) => {
      // Supprimer les commentaires de ligne mais pas ceux dans les cha√Ænes
      const commentIndex = line.indexOf("--");
      if (commentIndex !== -1) {
        // V√©rifier si le commentaire est dans une cha√Æne (approximation simple)
        const beforeComment = line.substring(0, commentIndex);
        const singleQuotes = (beforeComment.match(/'/g) || []).length;
        const doubleQuotes = (beforeComment.match(/"/g) || []).length;

        // Si nombre impair de guillemets, le commentaire est probablement dans une cha√Æne
        if (singleQuotes % 2 === 0 && doubleQuotes % 2 === 0) {
          return beforeComment.trim();
        }
      }
      return line;
    })
    .filter((line) => line.trim().length > 0);

  let i = 0;
  while (i < cleanedLines.length) {
    const line = cleanedLines[i];
    const trimmedLine = line.trim();

    // D√©tecter les d√©limiteurs sp√©ciaux
    if (trimmedLine.includes("-- DELIMITER //")) {
      // Terminer le bloc courant s'il n'est pas vide
      if (currentBlock.trim()) {
        blocks.push(currentBlock.trim());
        currentBlock = "";
      }
      i++;
      continue;
    }

    // Ignorer les lignes vides
    if (!trimmedLine) {
      i++;
      continue;
    }

    // D√©tecter le d√©but d'un bloc dollar-quoted
    if (!insideDollarQuotes) {
      const dollarMatch = line.match(/\$([a-zA-Z_]*)\$/);
      if (dollarMatch) {
        insideDollarQuotes = true;
        dollarQuoteTag = dollarMatch[0];
      }
    }

    currentBlock += line + "\n";

    // D√©tecter la fin d'un bloc dollar-quoted
    if (insideDollarQuotes && line.includes(dollarQuoteTag)) {
      // Chercher la deuxi√®me occurrence du tag
      const firstIndex = line.indexOf(dollarQuoteTag);
      const secondIndex = line.indexOf(dollarQuoteTag, firstIndex + 1);
      if (secondIndex !== -1) {
        insideDollarQuotes = false;
        dollarQuoteTag = "";

        // Si c'est une fonction qui se termine par un ;, on force la s√©paration
        if (
          line.trim().endsWith(";") &&
          currentBlock.includes("CREATE OR REPLACE FUNCTION")
        ) {
          const block = currentBlock.trim();
          if (block && !block.startsWith("--")) {
            blocks.push(block);
          }
          currentBlock = "";
          i++;
          continue;
        }
      }
    }

    // Si on n'est pas dans un bloc dollar-quoted et qu'on trouve un ;
    if (!insideDollarQuotes && line.includes(";")) {
      const block = currentBlock.trim();
      if (block && !block.startsWith("--")) {
        blocks.push(block);
      }
      currentBlock = "";
    }

    i++;
  }

  // Ajouter le dernier bloc s'il existe
  if (currentBlock.trim()) {
    const block = currentBlock.trim();
    if (!block.startsWith("--")) {
      blocks.push(block);
    }
  }

  return blocks.filter((block) => block.length > 0);
}

/**
 * Trie les blocs SQL par ordre de priorit√© pour √©viter les erreurs de d√©pendances
 */
function sortSQLBlocks(blocks: string[]): string[] {
  const sortedBlocks: string[] = [];

  // S√©parer les blocs par type pour un meilleur contr√¥le
  const extensions = blocks.filter((block) => /^CREATE EXTENSION/i.test(block));
  const types = blocks.filter((block) => /^CREATE TYPE.*AS ENUM/i.test(block));
  const tables = blocks.filter((block) => /^CREATE TABLE/i.test(block));
  const indexes = blocks.filter((block) => /^CREATE INDEX/i.test(block));
  const functions = blocks.filter((block) =>
    /^CREATE OR REPLACE FUNCTION(?!.*trigger)/i.test(block),
  );
  const triggerFunctions = blocks.filter((block) =>
    /^CREATE OR REPLACE FUNCTION.*trigger/i.test(block),
  );
  const triggers = blocks.filter((block) => /^CREATE TRIGGER/i.test(block));
  const views = blocks.filter((block) => /^CREATE VIEW/i.test(block));
  const alterTables = blocks.filter((block) => /^ALTER TABLE/i.test(block));
  const policies = blocks.filter((block) => /^CREATE POLICY/i.test(block));
  const comments = blocks.filter((block) => /^COMMENT ON/i.test(block));
  const inserts = blocks.filter((block) => /^INSERT INTO/i.test(block));

  // Assembler dans l'ordre correct
  sortedBlocks.push(...extensions);
  sortedBlocks.push(...types);
  sortedBlocks.push(...tables);
  sortedBlocks.push(...indexes);
  sortedBlocks.push(...functions);
  sortedBlocks.push(...triggerFunctions);
  sortedBlocks.push(...triggers);
  sortedBlocks.push(...views);
  sortedBlocks.push(...alterTables);
  sortedBlocks.push(...policies);
  sortedBlocks.push(...comments);
  sortedBlocks.push(...inserts);

  // Ajouter tous les blocs restants qui ne correspondent √† aucune cat√©gorie
  const usedBlocks = new Set(sortedBlocks);
  const remainingBlocks = blocks.filter((block) => !usedBlocks.has(block));
  sortedBlocks.push(...remainingBlocks);

  return sortedBlocks;
}

/**
 * Script d'initialisation de la base de donn√©es
 * Ex√©cute le fichier database.sql pour cr√©er toutes les tables, types, fonctions et vues
 */

async function initializeDatabase(): Promise<void> {
  const client = await db.connect();

  try {
    console.log("üöÄ D√©but de l'initialisation de la base de donn√©es...");

    // Lire le fichier SQL
    const sqlFilePath = path.join(__dirname, "../../../database.sql");

    if (!fs.existsSync(sqlFilePath)) {
      throw new Error(
        `Le fichier database.sql n'a pas √©t√© trouv√© √† l'emplacement: ${sqlFilePath}`,
      );
    }

    const sqlContent = fs.readFileSync(sqlFilePath, "utf8");

    console.log("üìÑ Fichier SQL lu avec succ√®s");

    // Commencer une transaction
    await client.query("BEGIN");

    console.log("üì¶ Ex√©cution du script SQL complet...");

    try {
      // Ex√©cuter le script SQL complet en une fois
      await client.query(sqlContent);

      // Valider la transaction
      await client.query("COMMIT");

      console.log("‚úÖ Base de donn√©es initialis√©e avec succ√®s!");

      // V√©rifier que les tables principales sont cr√©√©es
      await verifyTables();
    } catch (error) {
      // Si l'ex√©cution en bloc √©choue, essayer bloc par bloc
      await client.query("ROLLBACK");
      console.log(
        "‚ö†Ô∏è  L'ex√©cution en bloc a √©chou√©, tentative bloc par bloc...",
      );

      await executeBlockByBlock(client, sqlContent);
    }
  } catch (error) {
    // Annuler la transaction en cas d'erreur
    try {
      await client.query("ROLLBACK");
    } catch (rollbackError) {
      console.error("Erreur lors du rollback:", rollbackError);
    }
    console.error(
      "‚ùå Erreur lors de l'initialisation de la base de donn√©es:",
      error,
    );
    throw error;
  } finally {
    client.release();
  }
}

/**
 * Ex√©cute le SQL bloc par bloc en cas d'√©chec de l'ex√©cution globale
 */
async function executeBlockByBlock(
  client: any,
  sqlContent: string,
): Promise<void> {
  console.log("üîÑ Ex√©cution bloc par bloc...");

  // Nettoyer et pr√©parer le contenu SQL de mani√®re plus intelligente
  let cleanedSQL = sqlContent
    .replace(/\/\*[\s\S]*?\*\//g, "") // Supprimer les commentaires de bloc
    .trim();

  // Diviser le contenu SQL en respectant les blocs de fonctions PostgreSQL
  const sqlBlocks = parsePostgreSQLBlocks(cleanedSQL);

  console.log(`üì¶ ${sqlBlocks.length} blocs SQL d√©tect√©s`);

  // Filtrer les blocs vides ou qui ne contiennent que des commentaires
  const filteredBlocks = sqlBlocks.filter((block) => {
    const trimmedBlock = block.trim();
    return (
      trimmedBlock && !trimmedBlock.startsWith("--") && trimmedBlock.length > 0
    );
  });

  console.log(`üì¶ ${filteredBlocks.length} blocs SQL valides apr√®s filtrage`);

  // Trier les blocs SQL par ordre de priorit√© pour √©viter les erreurs de d√©pendances
  const sortedBlocks = sortSQLBlocks(filteredBlocks);

  console.log(
    `üì¶ ${sortedBlocks.length} blocs SQL tri√©s et pr√™ts √† √™tre ex√©cut√©s`,
  );

  // Nettoyer les objets existants probl√©matiques avant de commencer
  await cleanupProblematicObjects(client);

  let successCount = 0;
  let skipCount = 0;

  for (let i = 0; i < sortedBlocks.length; i++) {
    const block = sortedBlocks[i];

    try {
      // Ignorer les commentaires et les blocs vides
      if (block.startsWith("--") || block.trim() === "") {
        skipCount++;
        continue;
      }

      // Gestion sp√©ciale pour les objets qui peuvent d√©j√† exister
      if (await shouldSkipExistingObject(client, block)) {
        console.log(`‚è≠Ô∏è  Bloc ${i + 1} ignor√© (objet existe d√©j√†)`);
        skipCount++;
        continue;
      }

      // Ex√©cuter le bloc SQL
      await client.query(block);
      successCount++;

      // Afficher le progr√®s
      if (successCount % 5 === 0 && successCount > 0) {
        console.log(
          `‚è≥ Progression: ${successCount}/${sortedBlocks.length - skipCount} blocs ex√©cut√©s`,
        );
      }
    } catch (error: any) {
      const blockType = getBlockType(block);

      console.error(
        `‚ùå Erreur lors de l'ex√©cution du bloc SQL (${blockType}):`,
      );
      console.error(`üìç Bloc ${i + 1}/${sortedBlocks.length}:`);
      console.error(
        `üìÑ SQL: ${block.substring(0, 300)}${block.length > 300 ? "..." : ""}`,
      );
      console.error(`üîç Code d'erreur: ${error.code || "N/A"}`);
      console.error(`üîç Message: ${error.message || "N/A"}`);

      // Gestion intelligente des erreurs
      if (await handleKnownErrors(client, error, block, blockType)) {
        console.log(`‚úÖ Erreur g√©r√©e automatiquement`);
        successCount++;
      } else {
        console.error(`‚ö†Ô∏è  Erreur critique d√©tect√©e, mais on continue...`);
      }
    }
  }

  console.log("‚úÖ Base de donn√©es initialis√©e avec succ√®s (bloc par bloc)!");
  console.log(`üìä Statistiques:`);
  console.log(`   - Blocs ex√©cut√©s: ${successCount}`);
  console.log(`   - Blocs ignor√©s: ${skipCount}`);
  console.log(`   - Total trait√©: ${successCount + skipCount}`);

  // V√©rifier que les tables principales sont cr√©√©es
  await verifyTables();
}

/**
 * Nettoie les objets probl√©matiques avant l'initialisation
 */
async function cleanupProblematicObjects(client: any): Promise<void> {
  console.log("üßπ Nettoyage pr√©ventif des objets probl√©matiques...");

  const cleanupQueries = [
    // Supprimer les types enum corrompus
    "DROP TYPE IF EXISTS message_type_enum CASCADE;",
    "DROP TYPE IF EXISTS work_day_status_enum CASCADE;",

    // Supprimer les tables qui peuvent causer des probl√®mes
    "DROP TABLE IF EXISTS messages CASCADE;",
    "DROP TABLE IF EXISTS message_media CASCADE;",
    "DROP TABLE IF EXISTS work_days CASCADE;",
  ];

  for (const query of cleanupQueries) {
    try {
      await client.query(query);
    } catch (error) {
      // Ignorer les erreurs de nettoyage
    }
  }

  console.log("‚úÖ Nettoyage pr√©ventif termin√©");
}

/**
 * D√©termine le type de bloc SQL
 */
function getBlockType(block: string): string {
  if (block.includes("CREATE EXTENSION")) return "EXTENSION";
  if (block.includes("CREATE TYPE")) return "TYPE ENUM";
  if (block.includes("CREATE TABLE")) return "TABLE";
  if (block.includes("CREATE INDEX")) return "INDEX";
  if (block.includes("CREATE OR REPLACE FUNCTION")) return "FUNCTION";
  if (block.includes("CREATE TRIGGER")) return "TRIGGER";
  if (block.includes("CREATE VIEW")) return "VIEW";
  if (block.includes("CREATE POLICY")) return "POLICY";
  if (block.includes("ALTER TABLE")) return "ALTER TABLE";
  if (block.includes("COMMENT ON")) return "COMMENT";
  return "UNKNOWN";
}

/**
 * V√©rifie si un objet existe d√©j√† et peut √™tre ignor√©
 */
async function shouldSkipExistingObject(
  client: any,
  block: string,
): Promise<boolean> {
  try {
    // V√©rifier les extensions
    if (block.includes("CREATE EXTENSION")) {
      const extensionMatch = block.match(
        /CREATE EXTENSION IF NOT EXISTS "([^"]+)"/,
      );
      if (extensionMatch) {
        const result = await client.query(
          "SELECT EXISTS(SELECT 1 FROM pg_extension WHERE extname = $1)",
          [extensionMatch[1]],
        );
        return result.rows[0].exists;
      }
    }

    // V√©rifier les types enum
    if (block.includes("CREATE TYPE") && block.includes("AS ENUM")) {
      const typeMatch = block.match(/CREATE TYPE (\w+) AS ENUM/);
      if (typeMatch) {
        const result = await client.query(
          "SELECT EXISTS(SELECT 1 FROM pg_type WHERE typname = $1)",
          [typeMatch[1]],
        );
        return result.rows[0].exists;
      }
    }

    // V√©rifier les tables
    if (block.includes("CREATE TABLE")) {
      const tableMatch = block.match(/CREATE TABLE (\w+)/);
      if (tableMatch) {
        const result = await client.query(
          "SELECT EXISTS(SELECT 1 FROM information_schema.tables WHERE table_name = $1)",
          [tableMatch[1]],
        );
        return result.rows[0].exists;
      }
    }

    return false;
  } catch (error) {
    return false;
  }
}

/**
 * G√®re les erreurs connues et tente de les r√©soudre
 */
async function handleKnownErrors(
  client: any,
  error: any,
  block: string,
  blockType: string,
): Promise<boolean> {
  const errorCode = error.code;
  const errorMessage = error.message;

  // Erreur: type already exists
  if (errorCode === "42710" && blockType === "TYPE ENUM") {
    console.log(`‚ÑπÔ∏è  Type enum existe d√©j√†, continuons...`);
    return true;
  }

  // Erreur: relation already exists
  if (
    errorCode === "42P07" &&
    (blockType === "TABLE" || blockType === "INDEX")
  ) {
    console.log(`‚ÑπÔ∏è  ${blockType} existe d√©j√†, continuons...`);
    return true;
  }

  // Erreur: relation does not exist pour les index
  if (errorCode === "42P01" && blockType === "INDEX") {
    console.log(`‚ÑπÔ∏è  Table manquante pour l'index, ignor√©`);
    return true;
  }

  // Erreur de syntaxe critique
  if (errorCode === "42601") {
    console.error(`‚ö†Ô∏è  Erreur de syntaxe critique d√©tect√©e`);
    return false;
  }

  return false;
}

/**
 * V√©rifie que les tables principales ont √©t√© cr√©√©es
 */
async function verifyTables(): Promise<void> {
  const expectedTables = [
    "freelances",
    "companies",
    "admins",
    "user_sessions",
    "admin_sessions",
    "otps",
    "category_skills",
    "skills",
    "freelance_skills",
    "media",
    "project_categories",
    "projects",
    "project_skills",
    "applications",
    "contracts",
    "deliverables",
    "deliverable_media",
    "invoices",
    "payments",
    "notifications",
    "user_notifications",
    "conversations",
    "messages",
    "message_media",
    "project_invitations",
    "litigations",
    "reports",
  ];

  console.log("üîç V√©rification des tables cr√©√©es...");

  for (const tableName of expectedTables) {
    try {
      const result = await query(
        `
        SELECT EXISTS (
          SELECT FROM information_schema.tables
          WHERE table_schema = 'public'
          AND table_name = $1
        )
      `,
        [tableName],
      );

      const exists = result.rows[0].exists;

      if (exists) {
        console.log(`‚úÖ Table '${tableName}' cr√©√©e avec succ√®s`);
      } else {
        console.log(`‚ùå Table '${tableName}' non trouv√©e`);
      }
    } catch (error) {
      console.error(
        `‚ùå Erreur lors de la v√©rification de la table '${tableName}':`,
        error,
      );
    }
  }
}

/**
 * V√©rifie que les types enum ont √©t√© cr√©√©s
 */
async function verifyEnumTypes(): Promise<void> {
  const expectedEnums = [
    "availability_enum",
    "company_size_enum",
    "admin_level_enum",
    "otp_type_enum",
    "experience_level_enum",
    "type_work_enum",
    "type_media_enum",
    "project_status_enum",
    "application_status_enum",
    "contract_status_enum",
    "payment_mode_enum",
    "deliverable_status_enum",
    "invoice_status_enum",
    "payment_status_enum",
    "payment_type_enum",
    "notification_type_enum",
    "invitation_status_enum",
    "litigation_status_enum",
    "report_status_enum",
    "message_type_enum", // Ajout√©
    "user_type_enum", // Ajout√©
  ];

  console.log("üîç V√©rification des types √©num√©r√©s...");

  for (const enumName of expectedEnums) {
    try {
      const result = await query(
        `
        SELECT EXISTS (
          SELECT FROM pg_type
          WHERE typname = $1
        )
      `,
        [enumName],
      );

      const exists = result.rows[0].exists;

      if (exists) {
        console.log(`‚úÖ Type enum '${enumName}' cr√©√© avec succ√®s`);
      } else {
        console.log(`‚ùå Type enum '${enumName}' non trouv√©`);
      }
    } catch (error) {
      console.error(
        `‚ùå Erreur lors de la v√©rification du type '${enumName}':`,
        error,
      );
    }
  }
}

/**
 * V√©rifie que les vues principales ont √©t√© cr√©√©es
 */
async function verifyViews(): Promise<void> {
  const expectedViews = [
    "active_freelances",
    "active_companies",
    "available_freelances",
    "admin_user_sessions",
    "admin_admin_sessions",
    "admin_session_stats",
    "admin_admin_session_stats",
    "admin_suspicious_activity",
    "admin_suspicious_admin_activity",
    "freelance_average_rating",
    "company_average_rating",
    "contract_summary",
    "deliverable_work_summary",
  ];

  console.log("üîç V√©rification des vues cr√©√©es...");

  for (const viewName of expectedViews) {
    try {
      const result = await query(
        `
        SELECT EXISTS (
          SELECT FROM information_schema.views
          WHERE table_schema = 'public'
          AND table_name = $1
        )
      `,
        [viewName],
      );

      const exists = result.rows[0].exists;

      if (exists) {
        console.log(`‚úÖ Vue '${viewName}' cr√©√©e avec succ√®s`);
      } else {
        console.log(`‚ùå Vue '${viewName}' non trouv√©e`);
      }
    } catch (error) {
      console.error(
        `‚ùå Erreur lors de la v√©rification de la vue '${viewName}':`,
        error,
      );
    }
  }
}

/**
 * Fonction utilitaire pour r√©initialiser compl√®tement la base de donn√©es
 * ATTENTION: Cette fonction supprime TOUTES les donn√©es!
 */
async function resetDatabase(): Promise<void> {
  console.log(
    "‚ö†Ô∏è  ATTENTION: R√©initialisation compl√®te de la base de donn√©es!",
  );
  console.log("‚ö†Ô∏è  Toutes les donn√©es seront supprim√©es!");

  const client = await db.connect();

  try {
    await client.query("BEGIN");

    // Supprimer toutes les tables dans l'ordre inverse des d√©pendances
    const dropQueries = [
      // Tables de liaison et d√©pendantes
      "DROP TABLE IF EXISTS evaluations CASCADE;",
      "DROP TABLE IF EXISTS deliverable_media CASCADE;",
      "DROP TABLE IF EXISTS message_media CASCADE;",
      "DROP TABLE IF EXISTS freelance_skills CASCADE;",
      "DROP TABLE IF EXISTS project_skills CASCADE;",
      "DROP TABLE IF EXISTS applications CASCADE;",
      "DROP TABLE IF EXISTS contracts CASCADE;",
      "DROP TABLE IF EXISTS deliverables CASCADE;",
      "DROP TABLE IF EXISTS invoices CASCADE;",
      "DROP TABLE IF EXISTS payments CASCADE;",
      "DROP TABLE IF EXISTS notifications CASCADE;",
      "DROP TABLE IF EXISTS user_notifications CASCADE;",
      "DROP TABLE IF EXISTS messages CASCADE;",
      "DROP TABLE IF EXISTS conversations CASCADE;",
      "DROP TABLE IF EXISTS project_invitations CASCADE;",
      "DROP TABLE IF EXISTS litigations CASCADE;",
      "DROP TABLE IF EXISTS reports CASCADE;",
      "DROP TABLE IF EXISTS projects CASCADE;",
      "DROP TABLE IF EXISTS project_categories CASCADE;",
      "DROP TABLE IF EXISTS media CASCADE;",
      "DROP TABLE IF EXISTS skills CASCADE;",
      "DROP TABLE IF EXISTS category_skills CASCADE;",
      "DROP TABLE IF EXISTS otps CASCADE;",
      "DROP TABLE IF EXISTS user_sessions CASCADE;",
      "DROP TABLE IF EXISTS admin_sessions CASCADE;",
      "DROP TABLE IF EXISTS admins CASCADE;",
      "DROP TABLE IF EXISTS companies CASCADE;",
      "DROP TABLE IF EXISTS freelances CASCADE;",

      // Types ENUMs
      "DROP TYPE IF EXISTS report_status_enum CASCADE;",
      "DROP TYPE IF EXISTS litigation_status_enum CASCADE;",
      "DROP TYPE IF EXISTS invitation_status_enum CASCADE;",
      "DROP TYPE IF EXISTS notification_type_enum CASCADE;",
      "DROP TYPE IF EXISTS payment_type_enum CASCADE;",
      "DROP TYPE IF EXISTS payment_status_enum CASCADE;",
      "DROP TYPE IF EXISTS invoice_status_enum CASCADE;",
      "DROP TYPE IF EXISTS deliverable_status_enum CASCADE;",
      "DROP TYPE IF EXISTS payment_mode_enum CASCADE;",
      "DROP TYPE IF EXISTS contract_status_enum CASCADE;",
      "DROP TYPE IF EXISTS application_status_enum CASCADE;",
      "DROP TYPE IF EXISTS project_status_enum CASCADE;",
      "DROP TYPE IF EXISTS type_media_enum CASCADE;",
      "DROP TYPE IF EXISTS type_work_enum CASCADE;",
      "DROP TYPE IF EXISTS otp_type_enum CASCADE;",
      "DROP TYPE IF EXISTS admin_level_enum CASCADE;",
      "DROP TYPE IF EXISTS company_size_enum CASCADE;",
      "DROP TYPE IF EXISTS availability_enum CASCADE;",
      "DROP TYPE IF EXISTS experience_level_enum CASCADE;",
      "DROP TYPE IF EXISTS message_type_enum CASCADE;",
      "DROP TYPE IF EXISTS user_type_enum CASCADE;",

      // Supprimer les fonctions
      "DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE;",
      "DROP FUNCTION IF EXISTS is_freelance_blocked(UUID) CASCADE;",
      "DROP FUNCTION IF EXISTS is_company_blocked(UUID) CASCADE;",
      "DROP FUNCTION IF EXISTS cleanup_expired_sessions() CASCADE;",
      "DROP FUNCTION IF EXISTS cleanup_expired_admin_sessions() CASCADE;",
      "DROP FUNCTION IF EXISTS cleanup_expired_otps() CASCADE;",
      "DROP FUNCTION IF EXISTS admin_revoke_session(UUID) CASCADE;",
      "DROP FUNCTION IF EXISTS admin_revoke_admin_session(UUID) CASCADE;",
      "DROP FUNCTION IF EXISTS admin_revoke_user_sessions(UUID) CASCADE;",
      "DROP FUNCTION IF EXISTS admin_revoke_admin_sessions(UUID) CASCADE;",
      "DROP FUNCTION IF EXISTS admin_block_freelance(UUID, INTEGER) CASCADE;",
      "DROP FUNCTION IF EXISTS admin_block_company(UUID, INTEGER) CASCADE;",

      // Supprimer les vues
      "DROP VIEW IF EXISTS admin_suspicious_admin_activity CASCADE;",
      "DROP VIEW IF EXISTS admin_suspicious_activity CASCADE;",
      "DROP VIEW IF EXISTS admin_admin_session_stats CASCADE;",
      "DROP VIEW IF EXISTS admin_session_stats CASCADE;",
      "DROP VIEW IF EXISTS admin_admin_sessions CASCADE;",
      "DROP VIEW IF EXISTS admin_user_sessions CASCADE;",
      "DROP VIEW IF EXISTS available_freelances CASCADE;",
      "DROP VIEW IF EXISTS active_companies CASCADE;",
      "DROP VIEW IF EXISTS active_freelances CASCADE;",
    ];

    for (const dropQuery of dropQueries) {
      try {
        await client.query(dropQuery);
      } catch (error) {
        // Ignorer les erreurs si l'objet n'existe pas
        console.log(`‚ÑπÔ∏è  ${dropQuery.split(" ")[2]} non trouv√©, ignor√©`);
      }
    }

    await client.query("COMMIT");
    console.log("‚úÖ Base de donn√©es r√©initialis√©e avec succ√®s");
  } catch (error) {
    await client.query("ROLLBACK");
    console.error("‚ùå Erreur lors de la r√©initialisation:", error);
    throw error;
  } finally {
    client.release();
  }
}

/**
 * Fonction principale qui g√®re les arguments de ligne de commande
 */
async function main(): Promise<void> {
  const args = process.argv.slice(2);
  const command = args[0];

  try {
    switch (command) {
      case "reset":
        await resetDatabase();
        await initializeDatabase();
        break;

      case "force-clean":
        console.log("üßπ Nettoyage forc√© de la base de donn√©es...");
        await forceCleanDatabase();
        await initializeDatabase();
        break;

      case "verify":
        await verifyTables();
        await verifyEnumTypes();
        await verifyViews();
        break;

      case "init":
      default:
        await initializeDatabase();
        break;
    }

    console.log("üéâ Op√©ration termin√©e avec succ√®s!");
    process.exit(0);
  } catch (error) {
    console.error("üí• √âchec de l'op√©ration:", error);
    process.exit(1);
  } finally {
    await db.end();
  }
}

/**
 * Nettoyage forc√© pour r√©soudre les probl√®mes de d√©pendances
 */
async function forceCleanDatabase(): Promise<void> {
  const client = await db.connect();

  try {
    console.log("üî• Suppression forc√©e de tous les objets...");

    // D√©sactiver RLS temporairement
    const disableRLSQueries = [
      "ALTER TABLE IF EXISTS freelances DISABLE ROW LEVEL SECURITY;",
      "ALTER TABLE IF EXISTS companies DISABLE ROW LEVEL SECURITY;",
      "ALTER TABLE IF EXISTS user_sessions DISABLE ROW LEVEL SECURITY;",
      "ALTER TABLE IF EXISTS admin_sessions DISABLE ROW LEVEL SECURITY;",
      "ALTER TABLE IF EXISTS otps DISABLE ROW LEVEL SECURITY;",
    ];

    for (const query of disableRLSQueries) {
      try {
        await client.query(query);
      } catch (error) {
        // Ignorer les erreurs
      }
    }

    // Supprimer tous les objets dans l'ordre
    const dropAllQuery = `
      DO $$
      DECLARE
          r RECORD;
      BEGIN
          -- Drop all views
          FOR r IN (SELECT schemaname, viewname FROM pg_views WHERE schemaname = 'public') LOOP
              EXECUTE 'DROP VIEW IF EXISTS ' || quote_ident(r.schemaname) || '.' || quote_ident(r.viewname) || ' CASCADE';
          END LOOP;

          -- Drop all tables
          FOR r IN (SELECT schemaname, tablename FROM pg_tables WHERE schemaname = 'public') LOOP
              EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.schemaname) || '.' || quote_ident(r.tablename) || ' CASCADE';
          END LOOP;

          -- Drop all types
          FOR r IN (SELECT typname FROM pg_type WHERE typnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public') AND typtype = 'e') LOOP
              EXECUTE 'DROP TYPE IF EXISTS ' || quote_ident(r.typname) || ' CASCADE';
          END LOOP;

          -- Drop all functions
          FOR r IN (SELECT proname, oidvectortypes(proargtypes) as argtypes FROM pg_proc WHERE pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')) LOOP
              EXECUTE 'DROP FUNCTION IF EXISTS ' || quote_ident(r.proname) || '(' || r.argtypes || ') CASCADE';
          END LOOP;
      END $$;
    `;

    await client.query(dropAllQuery);
    console.log("‚úÖ Nettoyage forc√© termin√©");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage forc√©:", error);
    throw error;
  } finally {
    client.release();
  }
}

// Ex√©cuter le script seulement s'il est appel√© directement
if (require.main === module) {
  main();
}

export {
  initializeDatabase,
  resetDatabase,
  verifyTables,
  verifyEnumTypes,
  forceCleanDatabase,
};
