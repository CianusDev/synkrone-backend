# Conventions Synkrone Backend

- `model.ts` (database model)
  - Exporte les interfaces TypeScript et enums pour l’entité.
  - Peut inclure des types complexes ou des relations (ex: skills, company, etc.)

- `repository.ts` (data access)
  - Classe avec méthodes pour les opérations BDD (CRUD, filtres, pagination).
  - Utilise une instance `db` ou `query` pour les requêtes SQL.
  - Peut inclure des méthodes de vérification d’existence (ex: categoryExists, companyExists).

- `service.ts` (business logic)
  - Classe qui utilise le repository pour la logique métier.
  - Peut appeler d’autres services/repositories pour des données liées.
  - Gère la validation métier additionnelle (ex: budgets, deadline, publication).

- `controller.ts` (request handling)
  - Classe avec handlers Express.
  - Valide les entrées avec Zod.
  - Gère la pagination, les filtres, la publication, les erreurs (ZodError, etc.).
  - Peut injecter des propriétés du middleware (ex: req.company).

- `route.ts` (routing)
  - Définit les routes Express et lie les handlers du controller.
  - Ajoute les middlewares d’authentification adaptés à chaque route (ex: AuthCompanyMiddleware, AuthFreelanceMiddleware).
  - Peut définir des routes publiques ou privées selon le rôle.

- `schema.ts` (validation)
  - Schémas Zod pour la validation des payloads (création, mise à jour, filtres, params).
  - Utilisé dans le controller pour valider les entrées.

- `README.md` (documentation)
  - Documente la structure, les endpoints, la sécurité, les payloads, la pagination, les erreurs, etc.

### Précisions supplémentaires

- Les endpoints sont pensés pour la pagination, la recherche, les filtres avancés.
- Les middlewares d’authentification sont adaptés au rôle (company, freelance, admin).
- Les controllers gèrent la validation, la gestion des erreurs et l’injection des propriétés du middleware.
- Les services centralisent la logique métier et peuvent orchestrer plusieurs repositories/services.
- Les repositories sont responsables de la communication directe avec la base de données.
- Les modèles TypeScript peuvent inclure des relations (ex: skills, company, applicationsCount, etc.).

#### Accès à la base de données

- Tous les repositories utilisent la fonction `query` ou l’instance `db` exportée par `src/config/database.ts` pour exécuter les requêtes SQL.
- Exemple d’import :
  ```ts
  import { query } from "../../config/database";
  ```
- Cela garantit une gestion centralisée de la connexion et des transactions PostgreSQL.
